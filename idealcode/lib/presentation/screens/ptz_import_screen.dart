import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

import '../../providers/project_provider.dart';
import '../../services/ptz_parser_service.dart';
import '../../utils/coordinate_calculator.dart';
import '../../data/models/project_file_model.dart';
import '../../core/constants/app_constants.dart';
import '../../utils/result.dart';

class PtzImportScreen extends ConsumerStatefulWidget {
  const PtzImportScreen({super.key, required this.projectId});

  final String projectId;

  @override
  ConsumerState<PtzImportScreen> createState() => _PtzImportScreenState();
}

class _PtzImportScreenState extends ConsumerState<PtzImportScreen> {
  final _ptzController = TextEditingController();
  final _formKey = GlobalKey<FormState>();
  bool _isParsing = false;
  bool _isValid = false;
  String? _validationError;
  int _charCount = 0;

  @override
  void initState() {
    super.initState();
    _ptzController.addListener(_onTextChanged);
  }

  @override
  void dispose() {
    _ptzController.removeListener(_onTextChanged);
    _ptzController.dispose();
    super.dispose();
  }

  void _onTextChanged() {
    setState(() {
      _charCount = _ptzController.text.length;
    });

    // –ê–≤—Ç–æ–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
    _validatePtz(_ptzController.text);
  }

  Future<void> _validatePtz(String text) async {
    if (text.trim().isEmpty) {
      setState(() {
        _isValid = false;
        _validationError = null;
      });
      return;
    }

    final validationResult = PtzParserService.validatePTZ(text);
    validationResult.fold(
      (error) {
        setState(() {
          _isValid = false;
          _validationError = error.message;
        });
      },
      (validatedText) {
        setState(() {
          _isValid = true;
          _validationError = null;
        });
      },
    );
  }

  Future<void> _importPtz() async {
    if (!_formKey.currentState!.validate() || !_isValid || _isParsing) return;

    final notifier = ref.read(projectProvider(widget.projectId).notifier);
    setState(() {
      _isParsing = true;
    });

    final parseResult = PtzParserService.parsePTZ(_ptzController.text);

    parseResult.fold(
      (error) {
        setState(() {
          _isParsing = false;
          _validationError = error.message;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Parse error: ${error.message}'),
            backgroundColor: Colors.red,
          ),
        );
      },
      (files) async {
        // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π
        final positionedFiles = CoordinateCalculator.calculateGridPositions(files);
        await notifier.addFiles(positionedFiles);

        setState(() {
          _isParsing = false;
        });

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Imported ${files.length} files successfully!'),
              backgroundColor: Colors.green,
              action: SnackBarAction(
                label: 'View Canvas',
                onPressed: () => context.goToProject(widget.projectId),
              ),
            ),
          );
        }

        // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        _ptzController.clear();
        _validatePtz('');
        Navigator.pop(context);
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Import PTZ'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
        actions: [
          if (_isValid)
            IconButton(
              icon: const Icon(Icons.info_outline),
              onPressed: _showPtzFormatHelp,
            ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Container(
                            padding: const EdgeInsets.all(8),
                            decoration: BoxDecoration(
                              color: Colors.blue.withOpacity(0.1),
                              shape: BoxShape.circle,
                            ),
                            child: const Icon(Icons.lightbulb_outline, color: Colors.blue),
                          ),
                          const SizedBox(width: 12),
                          const Expanded(
                            child: Text(
                              'Paste your complete PTZ text below. It should follow this format:\n'
                              'üìÇ –≠–¢–ê–ü 1: CONFIGURATION\n'
                              '1. –§–∞–π–ª: path/to/pubspec.yaml\n'
                              '–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: Description here.\n'
                              '–°–≤—è–∑–∏: Depends on file 2.\n\n'
                              'The parser will automatically extract files, descriptions, and dependencies.',
                              style: TextStyle(fontSize: 14, height: 1.4),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),
                      TextButton.icon(
                        onPressed: _showPtzFormatHelp,
                        icon: const Icon(Icons.help_outline),
                        label: const Text('Show PTZ Format Guide'),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),

              // TextField –¥–ª—è PTZ
              TextFormField(
                controller: _ptzController,
                maxLines: 20,
                minLines: 10,
                expands: false,
                decoration: InputDecoration(
                  labelText: 'PTZ Content *',
                  hintText: 'Paste your detailed technical specification here...',
                  prefixIcon: const Icon(Icons.description),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  errorBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: const BorderSide(color: Colors.red),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: _isValid ? Colors.green : Colors.orange),
                  ),
                  contentPadding: const EdgeInsets.all(16),
                  alignLabelWithHint: true,
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'PTZ content is required';
                  }
                  if (!_isValid) {
                    return 'Please fix the format (check validation below)';
                  }
                  return null;
                },
                keyboardType: TextInputType.multiline,
                textInputAction: TextInputAction.newline,
              ),
              const SizedBox(height: 8),

              // –°—á–µ—Ç—á–∏–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: _isValid ? Colors.green.withOpacity(0.1) : 
                           (_validationError != null ? Colors.red.withOpacity(0.1) : Colors.grey.withOpacity(0.1)),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(
                    color: _isValid ? Colors.green : 
                           (_validationError != null ? Colors.red : Colors.grey),
                  ),
                ),
                child: Row(
                  children: [
                    Icon(
                      _isValid ? Icons.check_circle : 
                             (_validationError != null ? Icons.error : Icons.info),
                      color: _isValid ? Colors.green : 
                             (_validationError != null ? Colors.red : Colors.grey),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '${_charCount > 0 ? '$_charCount chars' : 'Enter PTZ content'}',
                            style: const TextStyle(fontWeight: FontWeight.w500),
                          ),
                          if (_validationError != null)
                            Text(
                              _validationError!,
                              style: const TextStyle(color: Colors.red, fontSize: 12),
                            ),
                          if (_isValid)
                            Text(
                              'Format is valid! Ready to parse.',
                              style: TextStyle(color: Colors.green, fontSize: 12, fontStyle: FontStyle.italic),
                            ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 24),

              // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
              if (_isParsing)
                const Center(child: CircularProgressIndicator())
              else ...[
                ElevatedButton.icon(
                  onPressed: _isValid ? _importPtz : null,
                  icon: const Icon(Icons.upload),
                  label: const Text('Parse & Import Files'),
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  ),
                ),
                const SizedBox(height: 12),
                TextButton.icon(
                  onPressed: _clearAndValidate,
                  icon: const Icon(Icons.clear),
                  label: const Text('Clear & Validate'),
                ),
                const SizedBox(height: 8),
                SizedBox(
                  width: double.infinity,
                  child: OutlinedButton.icon(
                    onPressed: _showExamplePtz,
                    icon: const Icon(Icons.help_outline),
                    label: const Text('Load Example PTZ'),
                  ),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }

  void _showPtzFormatHelp() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('PTZ Format Guide'),
        content: const SingleChildScrollView(
          child: Text(
            'Your PTZ should follow this structure:\n\n'
            'üìÇ STAGE 1: CONFIGURATION FILES\n'
            '1. File: pubspec.yaml\n'
            'Annotation: Main Flutter config file with dependencies.\n'
            'Connections: Depends on analysis_options.yaml (file 2).\n\n'
            'üìÇ STAGE 2: MODELS\n'
            '2. File: lib/models/user.dart\n'
            'Annotation: User data model.\n'
            'Connections: Used by screens (files 5-7).\n\n'
            'Key points:\n'
            '‚Ä¢ Use numbers for file ordering (1., 2., etc.)\n'
            '‚Ä¢ "File:" followed by path (e.g., lib/main.dart)\n'
            '‚Ä¢ "Annotation:" for description\n'
            '‚Ä¢ "Connections:" for dependencies (mention file numbers or paths)\n'
            '‚Ä¢ Stages with üìÇ for grouping\n\n'
            'The parser auto-detects files, types, and dependencies!',
          ),
        ),
        actions: [
          TextButton(
            onPressed: Navigator.of(context).pop,
            child: const Text('Got it!'),
          ),
        ],
      ),
    );
  }

  void _showExamplePtz() {
    const example = '''
üìÇ –≠–¢–ê–ü 1: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê
1. –§–∞–π–ª: pubspec.yaml
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª Flutter. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –≤–µ—Ä—Å–∏–∏ SDK –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞. –í–∫–ª—é—á–∞–µ—Ç –ø–∞–∫–µ—Ç—ã –¥–ª—è Riverpod, Hive –∏ GitHub API.
–°–≤—è–∑–∏: –†–æ–¥–∏—Ç–µ–ª—å –¥–ª—è —Ñ–∞–π–ª–∞ 2 (analysis_options.yaml) –∏ —Ñ–∞–π–ª–∞ 6 (lib/main.dart).

2. –§–∞–π–ª: analysis_options.yaml
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞. –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–¥–∞ –∏ Flutter lint.
–°–≤—è–∑–∏: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤–ª–∏—è—é—Ç –Ω–∞ –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ —Ñ–∞–π–ª—ã –≤ lib/.

üìÇ –≠–¢–ê–ü 2: –û–°–ù–û–í–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê
3. –§–∞–π–ª: lib/main.dart
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Hive, –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç App.
–°–≤—è–∑–∏: –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–∞–π–ª–∞ 4 (app.dart), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–º–∏ —ç–∫—Ä–∞–Ω–∞–º–∏.

4. –§–∞–π–ª: lib/app.dart
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ä–æ—É—Ç–∏–Ω–≥–æ–º GoRouter –∏ —Ç–µ–º–æ–π Material Design.
–°–≤—è–∑–∏: –í–∫–ª—é—á–∞–µ—Ç —ç–∫—Ä–∞–Ω—ã 18-25, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç constants (5).
    ''';

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Example PTZ'),
        content: SingleChildScrollView(child: Text(example)),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _ptzController.text = example;
              _validatePtz(example);
            },
            child: const Text('Load Example'),
          ),
          TextButton(
            onPressed: Navigator.of(context).pop,
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
  }

  void _clearAndValidate() {
    _ptzController.clear();
    setState(() {
      _validationError = null;
      _isValid = false;
    });
    _validatePtz('');
  }
}
