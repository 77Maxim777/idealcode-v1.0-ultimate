import 'package:collection/collection.dart';
import 'package:flutter/foundation.dart';

import '../data/models/project_file_model.dart';
import '../utils/result.dart';
import 'dart:math' as math;

class ParseError {
  final String message;
  final int lineNumber;
  final String snippet;

  ParseError(this.message, {this.lineNumber = -1, this.snippet = ''});

  @override
  String toString() {
    if (lineNumber > 0) {
      return 'ParseError at line $lineNumber: $message\nSnippet: $snippet';
    }
    return 'ParseError: $message';
  }
}

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –ü–¢–ó –≤ —Å–ø–∏—Å–æ–∫ ProjectFile
class PtzParserService {
  // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ü–¢–ó
  static final RegExp _fileHeaderRegex = RegExp(
    r'^(\d+)\.\s*–§–∞–π–ª:\s*(.+?)(?=\n|$)',
    multiLine: true,
    caseSensitive: false,
  );

  static final RegExp _annotationRegex = RegExp(
    r'–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:\s*(.+?)(?=\n–°–≤—è–∑–∏:|\n\d+\.|\n\n|$)',
    multiLine: true,
    dotAll: true,
    caseSensitive: false,
  );

  static final RegExp _dependenciesRegex = RegExp(
    r'–°–≤—è–∑–∏:\s*(.+?)(?=\n\d+\.|\n\n|$)',
    multiLine: true,
    dotAll: true,
    caseSensitive: false,
  );

  static final RegExp _fileNumberRegex = RegExp(r'—Ñ–∞–π–ª(?:–∞)?\s*(\d+)');
  static final RegExp _pathRegex = RegExp(r'([a-zA-Z0-9_/.-]+\.[a-zA-Z0-9]+)');

  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ü–¢–ó —Ç–µ–∫—Å—Ç–∞
  static Result<List<ProjectFile>, ParseError> parsePTZ(String ptzText) {
    try {
      if (ptzText.trim().isEmpty) {
        return Result.error(ParseError('PTZ text is empty'));
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç: —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
      final normalizedText = _normalizeText(ptzText);

      final matches = _fileHeaderRegex.allMatches(normalizedText);

      if (matches.isEmpty) {
        return Result.error(ParseError(
          'No file definitions found. Expected format: "1. –§–∞–π–ª: path/to/file.ext"'
        ));
      }

      final List<ProjectFile> files = [];
      final List<String> parsedLines = [];

      for (final match in matches) {
        final fileNumber = match.group(1)!;
        final rawPath = match.group(2)!.trim();

        // –û—á–∏—Å—Ç–∫–∞ –ø—É—Ç–∏ –æ—Ç –ª–∏—à–Ω–µ–≥–æ
        final path = _cleanPath(rawPath);

        if (path.isEmpty) {
          return Result.error(ParseError(
            'Invalid file path in file #$fileNumber',
            lineNumber: _getLineNumber(ptzText, match.start),
          ));
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ —Å–≤—è–∑–µ–π
        final contextStart = match.start;
        final contextEnd = _findNextSectionEnd(normalizedText, contextStart);

        final contextText = normalizedText.substring(contextStart, contextEnd);
        parsedLines.add(contextText);

        // –ü–∞—Ä—Å–∏–Ω–≥ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        final annotationMatch = _annotationRegex.firstMatch(contextText);
        final annotation = annotationMatch?.group(1)?.trim() ?? '';

        // –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        final dependenciesMatch = _dependenciesRegex.firstMatch(contextText);
        final dependenciesText = dependenciesMatch?.group(1)?.trim() ?? '';

        // –ü–∞—Ä—Å–∏–Ω–≥ —ç—Ç–∞–ø–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        final stageMatch = RegExp(r'üìÇ\\s*–≠–¢–ê–ü\\s*\\d+:\\s*(.+?)(?=\\nüìÇ|\\Z)').firstMatch(ptzText);
        final stage = stageMatch?.group(1)?.trim() ?? 'Unknown Stage';

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        final fileId = '${fileNumber}_$path'.replaceAll('/', '_');
        final fileType = _getTypeFromPath(path);

        final projectFile = ProjectFile(
          id: fileId,
          path: path,
          annotation: annotation.isNotEmpty ? '$stage: $annotation' : stage,
          type: fileType,
          status: FileStatus.empty,
          dependencies: _parseDependencies(dependenciesText, files, fileNumber),
          lastModified: DateTime.now(),
        );

        files.add(projectFile);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      final cycleCheck = _detectCycles(files);
      if (cycleCheck.isNotEmpty) {
        return Result.error(ParseError('Circular dependencies detected: ${cycleCheck.join(', ')}'));
      }

      // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π
      final positionedFiles = _calculateGridPositions(files);

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      debugPrint('Parsed ${files.length} files from PTZ');
      for (final line in parsedLines) {
        debugPrint('Parsed line: ${line.substring(0, math.min(100, line.length))}...');
      }

      return Result.success(positionedFiles);
    } catch (e, stackTrace) {
      debugPrint('PTZ parsing error: $e\n$stackTrace');
      return Result.error(ParseError('Parsing failed: ${e.toString()}'));
    }
  }

  /// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ü–¢–ó
  static String _normalizeText(String text) {
    return text
        .replaceAll(RegExp(r'\r\n?'), '\n')
        .replaceAll(RegExp(r'[ \t]+'), ' ')
        .trim();
  }

  /// –û—á–∏—Å—Ç–∫–∞ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
  static String _cleanPath(String rawPath) {
    return rawPath
        .trim()
        .replaceAll(RegExp(r'["\'`]'), '')
        .replaceAll(RegExp(r'\\s+'), '_')
        .toLowerCase();
  }

  /// –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  static List<String> _parseDependencies(
    String dependenciesText,
    List<ProjectFile> existingFiles,
    String currentFileNumber,
  ) {
    final dependencies = <String>[];

    if (dependenciesText.isEmpty) return dependencies;

    // –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
    final numberMatches = _fileNumberRegex.allMatches(dependenciesText);
    for (final match in numberMatches) {
      final depNumber = match.group(1);
      if (depNumber != null && depNumber != currentFileNumber) {
        final depFile = existingFiles.firstWhereOrNull(
          (file) => file.id.startsWith('${depNumber}_'),
        );
        if (depFile != null) {
          dependencies.add(depFile.id);
        }
      }
    }

    // –ü–æ–∏—Å–∫ –ø—É—Ç–µ–π
    final pathMatches = _pathRegex.allMatches(dependenciesText);
    for (final match in pathMatches) {
      final depPath = match.group(1)!;
      final depFile = existingFiles.firstWhereOrNull(
        (file) => file.path.toLowerCase().contains(depPath.toLowerCase()),
      );
      if (depFile != null && !dependencies.contains(depFile.id)) {
        dependencies.add(depFile.id);
      }
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    final result = dependencies.toSet().toList()..sort();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    final currentFile = existingFiles.isNotEmpty ? existingFiles.last : null;
    if (currentFile != null && result.contains(currentFile.id)) {
      result.remove(currentFile.id);
    }

    return result;
  }

  /// –ü–æ–∏—Å–∫ –∫–æ–Ω—Ü–∞ —Å–µ–∫—Ü–∏–∏
  static int _findNextSectionEnd(String text, int start) {
    final remainingText = text.substring(start);
    final nextHeader = RegExp(r'\n\d+\.\s*–§–∞–π–ª:').firstMatch(remainingText);
    if (nextHeader != null) {
      return start + nextHeader.start;
    }
    return text.length;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—à–∏–±–∫–∏
  static int _getLineNumber(String text, int charIndex) {
    return text.substring(0, charIndex).split('\n').length;
  }

  /// –î–µ—Ç–µ–∫—Ü–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  static List<String> _detectCycles(List<ProjectFile> files) {
    final visited = <String>{};
    final recStack = <String>{};
    final cycles = <String>[];

    for (final file in files) {
      if (!visited.contains(file.id)) {
        final cycle = _detectCycleUtil(file, files, visited, recStack, []);
        if (cycle.isNotEmpty) {
          cycles.addAll(cycle);
        }
      }
    }

    return cycles.toSet().toList();
  }

  static List<String> _detectCycleUtil(
    ProjectFile file,
    List<ProjectFile> allFiles,
    Set<String> visited,
    Set<String> recStack,
    List<String> currentPath,
  ) {
    visited.add(file.id);
    recStack.add(file.id);
    currentPath.add(file.id);

    for (final depId in file.dependencies) {
      final depFile = allFiles.firstWhereOrNull((f) => f.id == depId);
      if (depFile == null) continue;

      if (!visited.contains(depFile.id)) {
        final cycle = _detectCycleUtil(depFile, allFiles, visited, recStack, currentPath);
        if (cycle.isNotEmpty) return cycle;
      } else if (recStack.contains(depFile.id)) {
        // –¶–∏–∫–ª –Ω–∞–π–¥–µ–Ω
        final cycleStart = currentPath.indexOf(depFile.id);
        return currentPath.sublist(cycleStart);
      }
    }

    recStack.remove(file.id);
    currentPath.removeLast();
    return [];
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ü–¢–ó —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
  static Result<String, ParseError> validatePTZ(String ptzText) {
    final normalized = _normalizeText(ptzText);

    if (normalized.length < 50) {
      return Result.error(ParseError('PTZ too short. Minimum expected length: 50 chars'));
    }

    final fileCount = _fileHeaderRegex.allMatches(normalized).length;
    if (fileCount < 1 || fileCount > 100) {
      return Result.error(ParseError('Invalid number of files: $fileCount. Expected 1-100'));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if (!normalized.toLowerCase().contains('—Ñ–∞–π–ª') || 
        !normalized.toLowerCase().contains('–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è')) {
      return Result.error(ParseError('PTZ missing required sections (–§–∞–π–ª, –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è)'));
    }

    return Result.success(normalized);
  }

  /// –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–µ—Ç–∫–∏
  static List<ProjectFile> _calculateGridPositions(List<ProjectFile> files) {
    const double itemWidth = 120.0;
    const double itemHeight = 80.0;
    const double spacing = 20.0;
    const int itemsPerRow = 4;

    return files.map((file, index) {
      final row = index ~/ itemsPerRow;
      final col = index % itemsPerRow;
      final x = col * (itemWidth + spacing);
      final y = row * (itemHeight + spacing);
      
      return file.copyWith(x: x, y: y);
    }).toList();
  }

  /// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  static void testParser() {
    const testPtz = '''
üìÇ –≠–¢–ê–ü 1: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–ï –§–ê–ô–õ–´
1. –§–∞–π–ª: pubspec.yaml
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Flutter. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
–°–≤—è–∑–∏: –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–∞–π–ª–∞ 2 (analysis_options.yaml).

2. –§–∞–π–ª: analysis_options.yaml
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞.
–°–≤—è–∑–∏: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–æ–º.

üìÇ –≠–¢–ê–ü 2: –ú–û–î–ï–õ–ò
3. –§–∞–π–ª: lib/data/models/project_model.dart
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞.
–°–≤—è–∑–∏: –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–∞–π–ª–∞ 4, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç–∫—Ä–∞–Ω–∞—Ö.
    ''';

    final result = parsePTZ(testPtz);
    result.fold(
      (error) => debugPrint('Test failed: $error'),
      (files) => debugPrint('Test success: ${files.length} files parsed'),
    );
  }
}

// –í–Ω–µ—à–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏
FileType _getTypeFromPath(String path) {
  final parts = path.split('.');
  if (parts.length < 2) return FileType.resource;
  
  final extension = parts.last.toLowerCase();
  
  if (FileExtensions.configFiles.contains('.$extension')) return FileType.config;
  if (FileExtensions.codeFiles.contains('.$extension')) return FileType.code;
  if (FileExtensions.resourceFiles.contains('.$extension')) return FileType.resource;
  if (FileExtensions.docFiles.contains('.$extension')) return FileType.documentation;
  
  return FileType.resource;
}